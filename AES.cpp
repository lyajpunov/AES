#include <stdio.h>
#include <stdlib.h>
#include <vector>
#include <iostream>
#include <algorithm>

#include "AES.h"



// S-Box
const unsigned int AES_SBOX[16][16] = {
    {0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76},
    {0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0},
    {0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15},
    {0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75},
    {0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84},
    {0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF},
    {0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8},
    {0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2},
    {0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73},
    {0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB},
    {0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79},
    {0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08},
    {0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A},
    {0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E},
    {0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF},
    {0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16}
};

// s-box inv
const unsigned int AES_INV_SBOX[16][16] = {
    {0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38, 0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB},
    {0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87, 0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE9, 0xCB},
    {0x54, 0x7B, 0x94, 0x32, 0xA6, 0xC2, 0x23, 0x3D, 0xEE, 0x4C, 0x95, 0x0B, 0x42, 0xFA, 0xC3, 0x4E},
    {0x08, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2, 0x76, 0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0xD1, 0x25},
    {0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92},
    {0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9, 0xDA, 0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84},
    {0x90, 0xD8, 0xAB, 0x00, 0x8C, 0xBC, 0xD3, 0x0A, 0xF7, 0xE4, 0x58, 0x05, 0xB8, 0xB3, 0x45, 0x06},
    {0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0x0F, 0x02, 0xC1, 0xAF, 0xBD, 0x03, 0x01, 0x13, 0x8A, 0x6B},
    {0x3A, 0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC, 0xEA, 0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73},
    {0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD, 0x35, 0x85, 0xE2, 0xF9, 0x37, 0xE8, 0x1C, 0x75, 0xDF, 0x6E},
    {0x47, 0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5, 0x89, 0x6F, 0xB7, 0x62, 0x0E, 0xAA, 0x18, 0xBE, 0x1B},
    {0xFC, 0x56, 0x3E, 0x4B, 0xC6, 0xD2, 0x79, 0x20, 0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4},
    {0x1F, 0xDD, 0xA8, 0x33, 0x88, 0x07, 0xC7, 0x31, 0xB1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F},
    {0x60, 0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0x0D, 0x2D, 0xE5, 0x7A, 0x9F, 0x93, 0xC9, 0x9C, 0xEF},
    {0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5, 0xB0, 0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61},
    {0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x26, 0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D}
};

// 轮常量表
const unsigned int AES_CTR[4][10] = {
    {0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
};

// 列混淆矩阵
const std::vector<std::vector<unsigned short int>> AES_S = {
    {0x02, 0x03, 0x01, 0x01},
    {0x01, 0x02, 0x03, 0x01},
    {0x01, 0x01, 0x02, 0x03},
    {0x03, 0x01, 0x01, 0x02},
};

// 逆混淆矩阵
const std::vector<std::vector<unsigned short int>> AES_INV_S{
    {0x0E, 0x0B, 0x0D, 0x09},
    {0x09, 0x0E, 0x0B, 0x0D},
    {0x0D, 0x09, 0x0E, 0x0B},
    {0x0B, 0x0D, 0x09, 0x0E}
};

// 计算轮秘钥
void cal_round_key(std::vector<std::vector<unsigned short int> > &m) {
    if (m.size() != 4 || m[0].size() != 4) {
        printf("Wrong size\n");
        return;
    }

    // 扩容
    m[0].resize(44);
    m[1].resize(44);
    m[2].resize(44);
    m[3].resize(44);

    // 10 轮加密秘钥
    for (int i = 1; i <= 10; i++) {
        /***********************************************************4的倍数列*/
        // 旋转字节
        m[0][i * 4] = m[1][i * 4 - 1];
        m[1][i * 4] = m[2][i * 4 - 1];
        m[2][i * 4] = m[3][i * 4 - 1];
        m[3][i * 4] = m[0][i * 4 - 1];

        // s-box替换
        m[0][i * 4] = AES_SBOX[m[0][i * 4] >> 4][m[0][i * 4] & 0x0F];
        m[1][i * 4] = AES_SBOX[m[1][i * 4] >> 4][m[1][i * 4] & 0x0F];
        m[2][i * 4] = AES_SBOX[m[2][i * 4] >> 4][m[2][i * 4] & 0x0F];
        m[3][i * 4] = AES_SBOX[m[3][i * 4] >> 4][m[3][i * 4] & 0x0F];

        // 异或操作
        m[0][i * 4] ^= (m[0][i * 4 - 4] ^ AES_CTR[0][i - 1]);
        m[1][i * 4] ^= (m[1][i * 4 - 4] ^ AES_CTR[1][i - 1]);
        m[2][i * 4] ^= (m[2][i * 4 - 4] ^ AES_CTR[2][i - 1]);
        m[3][i * 4] ^= (m[3][i * 4 - 4] ^ AES_CTR[3][i - 1]);

        /************************************************************非4倍数列*/
        for (int j = 1; j <= 3; j++) {
            m[0][i * 4 + j] = m[0][i * 4 + j - 1] ^ m[0][i * 4 + j - 4];
            m[1][i * 4 + j] = m[1][i * 4 + j - 1] ^ m[1][i * 4 + j - 4];
            m[2][i * 4 + j] = m[2][i * 4 + j - 1] ^ m[2][i * 4 + j - 4];
            m[3][i * 4 + j] = m[3][i * 4 + j - 1] ^ m[3][i * 4 + j - 4];
        }
    }
};

// 字节代换
void byte_substitution(std::vector<std::vector<unsigned short int> > &m) {
    if (m.size() == 0 || m[0].size() == 0) {
        printf("Wrong size\n");
        return;
    }

    for (int i = 0; i < m.size(); i++) {
        for (int j = 0; j < m[i].size(); j++) {
            m[i][j] = AES_SBOX[m[i][j] >> 4][m[i][j] & 0x0F];
        }
    }
}

void byte_substitution_inv(std::vector<std::vector<unsigned short int> > &m) {
    if (m.size() == 0 || m[0].size() == 0) {
        printf("Wrong size\n");
        return;
    }

    for (int i = 0; i < m.size(); i++) {
        for (int j = 0; j < m[i].size(); j++) {
            m[i][j] = AES_INV_SBOX[m[i][j] >> 4][m[i][j] & 0x0F];
        }
    }
}

// 行移位
void row_shift(std::vector<std::vector<unsigned short int> > &m) {
    if(m.size() != 4 || m[0].size() != 4) {
        printf("Wrong size\n");
        return;
    }

    for (int i = 1; i <= 3; i++) {
        // 对第i行进行循环左移i个位置
        std::rotate(m[i].begin(), m[i].begin() + i, m[i].end());
    }
}

// 行移位的逆
void row_shift_inv(std::vector<std::vector<unsigned short int>> &m) {
    if (m.size() != 4 || m[0].size() != 4) {
        printf("Wrong size\n");
        return;
    }

    for (int i = 1; i <= 3; i++) {
        // 循环右移 i 位 = 循环左移 (4 - i) 位
        std::rotate(m[i].begin(), m[i].begin() + (4 - i), m[i].end());
    }
}

// 两数相乘
unsigned short int gf_mul(unsigned short int a, unsigned short int b) {
    unsigned short int result = 0;
    unsigned short int temp_a = a, temp_b = b;
    for (int i = 0; i < 8; ++i) {
        if (temp_b & 1) {
            result ^= temp_a;
        }
        bool highest_bit_set = temp_a & 0x80;  // check if highest bit of a is set
        temp_a <<= 1;  // multiply a by 2
        if (highest_bit_set) {
            temp_a ^= 0x11B;  // if the highest bit was set, reduce modulo 0x11B
        }
        temp_b >>= 1;  // divide b by 2
    }
    return result;
}

// 列混淆
void column_confusion(std::vector<std::vector<unsigned short int> > &m) {
    std::vector<std::vector<unsigned short int>> result(4, std::vector<unsigned short int>(4, 0));
    for (int col = 0; col < 4; ++col) {
        for (int row = 0; row < 4; ++row) {
            for (int i = 0; i < 4; ++i) {
                result[row][col] ^= gf_mul(m[row][i], AES_S[i][col]);
            }
        }
    }

    m = result;
}

// 列混淆逆函数
void column_confusion_inv(std::vector<std::vector<unsigned short int> > &m) {
    std::vector<std::vector<unsigned short int>> result(4, std::vector<unsigned short int>(4, 0));
    for (int col = 0; col < 4; ++col) {
        for (int row = 0; row < 4; ++row) {
            for (int i = 0; i < 4; ++i) {
                result[row][col] ^= gf_mul(m[row][i], AES_INV_S[i][col]);
            }
        }
    }

    m = result;
}

// 轮秘钥加， 其中m2是秘钥，不能写反
void add_key(std::vector<std::vector<unsigned short int> > &m1, std::vector<std::vector<unsigned short int> > &m2) {
    if (m1.size() != 4 || m2.size() != 4 || m1[0].size() != 4 || m2[0].size() != 4) {
        printf("Wrong size\n");
        return;
    }

    for (int col = 0; col < 4; ++col) {
        for (int row = 0; row < 4; ++row) {
            m1[row][col] ^= m2[row][col];
        }
    }
}


std::vector<std::vector<std::vector<unsigned short>>> splitMatrix(const std::vector<std::vector<unsigned short>>& input, int block_size) {
    if (input.empty() || input[0].size() % block_size != 0) {
        throw std::invalid_argument("Invalid matrix dimensions for splitting.");
    }

    int rows = input.size();
    int cols = input[0].size();
    int num_blocks = cols / block_size;

    std::vector<std::vector<std::vector<unsigned short>>> output(num_blocks, std::vector<std::vector<unsigned short>>(rows, std::vector<unsigned short>(block_size)));

    for (int b = 0; b < num_blocks; ++b) {
        for (int i = 0; i < rows; ++i) {
            for (int j = 0; j < block_size; ++j) {
                output[b][i][j] = input[i][b * block_size + j];
            }
        }
    }

    return output;
}
